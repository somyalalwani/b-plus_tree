#include <climits>
#include <iostream>
#include <sstream>
using namespace std;

struct Node {

  bool leaf;
  int size;
  int *key=new int[2];

  Node **ptr = new Node *[2 + 1];
};

class BPTree {
    Node *root;

    void insertInternal(Node *temp,Node *child,int x)
   {
        if(temp->size<2)
        {
            int i=0;
            int j=0;
            while(i<temp->size && x>temp->key[i])
                i=i+1;
            j=temp->size;
        
            while(j>i) 
            {
            temp->key[j]=temp->key[j - 1];
                --j;
            }
            j=1+temp->size;
            //cout<<j;
           
            while(j>i+1) 
            {
            temp->ptr[j]=temp->ptr[j-1];
            --j;
            }

            temp->key[i]=x;
            ++ temp->size;
            temp->ptr[i+1] = child;
        } 

        else {
            int extraKey[3];
            Node *extraPtr[4];
            Node *newInternal = new Node;
            int i=0;
            while(i<=1)
            {
            extraKey[i] = temp->key[i];
            //cout<<extraKey[i];
                ++i;
            }
            //cout<<i;
            i=0;

            while(i<=2)
            {
            extraPtr[i] = temp->ptr[i];
            ++i;
            }
            
            i = 0;
            int j=0;
            while(i<=1 && x>extraKey[i])
                ++i;
            j=3;
            while(j>i)
            {
                extraKey[j]=extraKey[j-1];
                --j;
            }

            extraKey[i]=x;
            for(j=4;j>i+1; j--)
                extraPtr[j] = extraPtr[j - 1];
            
            extraPtr[1+ i] = child;
            //cout<<i;
            
            newInternal->leaf = false;
            temp->size =1;
            newInternal->size =1;
            i=0;
            j=temp->size+1;
            for(;i<newInternal->size;++i,++j) 
                newInternal->key[i] = extraKey[j];
            i=0;
            j=temp->size+1;
            for(;i<newInternal->size+ 1; i++, j++) {
            newInternal->ptr[i] = extraPtr[j];
            }
            if (temp != root)  
            {
            insertInternal(findParent(temp,root), newInternal, temp->key[temp->size]);
            }
            else
                
            {
            Node *newRoot = new Node;
            newRoot->key[0] = temp->key[temp->size];
            newRoot->ptr[0] = temp;
            newRoot->ptr[1] = newInternal;
            newRoot->leaf = false;
            newRoot->size = 1;
            root = newRoot;
            }
        }
    }
  
    Node * findParent(Node *child, Node *p) 
    {
        Node *parent;
        if (p->leaf)
            return NULL;
        if((p->ptr[0])->leaf) 
            return NULL;
        int i=0;
        for(;i<= p->size;++i)
        {
            if(p->ptr[i]==child)
            {
                parent = p;
                return parent;
            }
            else
            {
                parent = findParent(child,p->ptr[i]);
                if (parent != NULL)
                    return parent;
            }
        }
        return parent;
    }
   public:
  
  BPTree()
  {
      root = NULL;
  }
  
  void search(int x)
    {
        if (root!=NULL)
        {
                Node *temp = root;
                while (!temp->leaf)
                {
                    int i=0;
                    int s= temp->size;
                    while(i<s)
                    {                      
                        if (i==s-1) 
                        {
                            temp = temp->ptr[i + 1];
                            break;
                        }
                        if (x<temp->key[i])
                        {
                            temp = temp->ptr[i];
                            break;
                        }
                        ++i;
                        //cout<<i;
                    }
                }
                int s= temp->size;
                int i=0;
                while(i<s)
                {
                    if(temp->key[i]==x)
                        {
                            cout << "Found\n";
                            return;
                        }
                    ++i;
                }
                cout << "Not found\n";
        }       
        else 
            cout << "Empty Tree\n";
    }

  void insert(int x)
    {
        if(root!=NULL)
        {
        Node *temp = root;
        Node *parent;
        while (!temp->leaf)
        {
            parent=temp;
            int s=temp->size;
            int i=0;
            while(i<s)
            {
                if(x<temp->key[i])
                {
                    temp = temp->ptr[i];
                    break;
                }
                if (i==s-1)
                {
                    temp = temp->ptr[i + 1];
                    break;
                }
            ++i;
            }
        }
        int s=temp->size;
        if (s<=1) 
        {
        int i = 0;

        while ((i<s) && (x>temp->key[i]))
            i=i+1;

        int j=s;
        while(j > i)
        {
            temp->key[j]=temp->key[j-1];
            --j;
        }
        //cout<<i;
        //cout<<j;
        //cout<<temp->size;
        temp->key[i] = x;
        temp->size ++;
        ++s;
        //cout<<temp->size;
        temp->ptr[s]=temp->ptr[s-1];
        temp->ptr[s-1]=NULL;
        } 
        else {
        Node *newLeaf = new Node;
        int extraNode[3];
        int i=0;
        while(i<=1)
        {
            extraNode[i] = temp->key[i];
            ++i;
        }
        i = 0;
        while (i<=1 && x>extraNode[i])
            i++;
            int j=3;
        while (j>i)
        {
            extraNode[j] = extraNode[j - 1];
            --j;
        }
        
        extraNode[i] = x;
        newLeaf->leaf = true;
        temp->size=1;
        int s=temp->size;
        newLeaf->size= 2;
        temp->ptr[s]=newLeaf;
        newLeaf->ptr[newLeaf->size] = temp->ptr[2];
        temp->ptr[2] = NULL;
        i=0;
        while(i<s) 
        {
            temp->key[i] = extraNode[i];
            ++i;
        }
        i=0;
        for(j=s;i<newLeaf->size;++i,++j) 
        {
            newLeaf->key[i] = extraNode[j];
        }

        if(root==temp)
        {
            Node *newRoot = new Node;
            newRoot->key[0] = newLeaf->key[0];
            newRoot->ptr[0] = temp;
            newRoot->ptr[1] = newLeaf;
            newRoot->leaf = false;
            newRoot->size = 1;
            root = newRoot;
        }
        else {
            insertInternal(parent,newLeaf, newLeaf->key[0]);
        }
        }
    }

        else
        {
            root = new Node;
            root->key[0] = x;
            root->leaf = true;
            root->size = 1;
        } 
    }
    Node *getRoot()
        {
        return root;
        }


  void output(Node *temp) 
  {
        if (temp) 
        {
            int i=0;
            int s=temp->size;
            while(i<s)
            {
                cout << temp->key[i] << "--";
                ++i;
                }
            cout << " || \n";
            if (! temp->leaf ) 
            {
            for(int j=0;j<=temp->size;++j) 
                output(temp->ptr[j]);
            }
        }
    }

  
};


int main() {
  BPTree node;
  node.insert(5);
  node.insert(15);
  node.insert(25);
  node.insert(35);
  node.insert(45);
  node.insert(55);
  node.insert(40);
  node.insert(30);
  node.insert(20);
  node.insert(25);

  node.output(node.getRoot());
  node.search(15);

}
